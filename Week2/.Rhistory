knitr::opts_chunk$set(echo = TRUE)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- ode(times = times, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
library(deSolve)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- ode(times = times, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
library(deSolve)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
plot(out)
# for (i in 1:4) {
# plot(out[,1], out[,i+1], type = 'l')
# }
library(deSolve)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
plot.tf(out)
plot.ts(out)
?plot.ts
out
head(out)
plot.ts(out$time)
out <- as.dataframe(ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler"))
out <- as.data.frame(ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler"))
ouy
out
plot.ts(out$time, out$mRNAR + out$R)
out <- ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
plot.ts(out['time'], out['R'])
library(deSolve)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler")
plot.ts(out['time'], out['R'])
head(out)
out['time']
out[time]
out[R]
out
out[1]
out[[1]]
out[[1]][1]
library(deSolve)
Glucorticoide.receptor.dynamics <- function(t, state, parms){
with(as.list(c(parms, state)),{
dmRNAR <- ks.RM * (1 - (DR.N / (IC50.Rm + DR.N))) - kd.RM * mRNAR
dR <- ks.R * mRNAR + Rf * kre * DR.N - kon * D * R - kd.R * R
dDR <- kon * D * R - kT * DR
dDR.N <- kT * DR - kre * DR.N
return(list(c(dmRNAR, dR, dDR, dDR.N)))
})
}
state <- c(mRNAR = 267*10e5 * 10e-3,
R = 4.74*10e5,
DR = 0,
DR.N = 0)
time <- seq(0, 48, by = 1)
parameters <- c(ks.RM = 2.90 * 10e5 * 10e-3,
IC50.Rm = 26.2*10e5,
kd.RM = 0.612,
ks.R = 3.22,
Rf = 0.49,
kre = 0.57,
kon = 0.00329,
kd.R = 0.0572,
kT = 0.63,
D = (20 * 1000)/374.471)
out <- as.data.frame(ode(times = time, y = state, parms = parameters, func = Glucorticoide.receptor.dynamics, method = "euler"))
plot.ts(out$time, out$mRNAR)
# for (i in 1:4) {
# plot(out[,1], out[,i+1], type = 'l')
# }
