with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = state, times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady, las = 1, type = 'o', xlim = c(0, 100))
points(out.steady.second, type = 'o)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = state, times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady, las = 1, type = 'o', xlim = c(0, 100))
points(out.steady.second, type = 'o')
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = state, times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady,, las = 1)
plot(out.steady, las = 1)
out.steady.second
cbind(out.steady, out.steady.second)
m
p
out.steady
out.steady
str(out.steady)
typeof(out.steady)
out.steady
?double
plot(out.steady.second, las = 1)
plot(out.steady.second, las = 1)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = out.steady[1,], times = t.steady.second, func = mRNA.dynamic, parms = parameters)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = out.steady[1,-1], times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady.second, las = 1)
out.steady.second <- ode(y = out.steady[1,-1], times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady.second, las = 1)
?ode
out.steady
out.steady[1,-1]
out.steady[len(out.steady),-1]
out.steady[length(out.steady),-1]
out.steady[length(out.steady[1]),-1]
tail(out.steady)
tail(out.steady, 1)
out.steady
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) #- k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out <- ode(y = state, times = times, func = mRNA.dynamic, parms = parameters)
plot(out, las = 1)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out <- ode(y = state, times = times, func = mRNA.dynamic, parms = parameters)
plot(out, las = 1)
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
corticosteroid <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out.normal <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
parameters['D'] <- 80 * 1000 * 1/374.471
out.high <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
parameters['D'] <- 1 * 1000 * 1/374.471
out.low <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
plot(out.normal[,1], out.normal[,2], las = 1, main = "mRNAr", ylim = c(0, 5), type = "l",
xlab = "time (h)", ylab = "receptor mRNA")
lines(out.high[,2], col = "red")
lines(out.low[,2], col = "green")
legend(x = 35, y = 2, legend = c("low dosis", "normal dosis", "high dosis"), fill = c("green", "black", "red"))
plot(out.normal[,1], out.normal[,3], las = 1, main = "R", ylim = c(0, 275), type = "l",
xlab = "time (h)", ylab = "free receptor density ")
lines(out.high[,3], col = "red")
lines(out.low[,3], col = "green")
legend(x = 35, y = 200, legend = c("low dosis", "normal dosis", "high dosis"), fill = c("green", "black", "red"))
MPL <- read.csv("MPL.csv")
dose.0.1 <- MPL[MPL$dose == 0.1,]
dose.0.3 <- MPL[MPL$dose == 0.3,]
medians <- aggregate(MPL[,c("MPL_conc","mRNA","Free_receptor")],list(MPL$dose,MPL$time), median, na.rm=T)
names(medians)[1:2] <- c("dose","time")
median.0.1 <- medians[medians$dose == 0.1,]
median.0.3 <- medians[medians$dose == 0.3,]
# Changes states of model from medians on time = 0
state['mRNAr'] <- medians[medians$time == 0,]$mRNA
state['R'] <- medians[medians$time == 0,]$Free_receptor
# Change the duration of the model with time points from experimental data
times <- unique(MPL$time)
# Change dosis concentration parameter (D) for 0.1 dosis
median_MPL_01 <- median(MPL$MPL_conc[MPL$dose==0.1], na.rm=T)
parameters['D'] <- median_MPL_01 * 1000 * 1/374.471
# Simulate model for 0.1 dosis
out.0.1 <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
# Change dosis concentration parameter (D) for 0.3 dosis
median_MPL_03 <- median(MPL$MPL_conc[MPL$dose==0.3], na.rm=T)
parameters['D'] <- median_MPL_03 * 1000 * 1/374.471
# Simulate model for 0.3 dosis
out.0.3 <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
par(mfrow = c(2,2), cex = 0.8)
# Plot mRNA plot for 0.1 dose
plot(dose.0.1$mRNA ~ dose.0.1$time,
xlab = "time", ylab = "mRNAr concentration", main = "mRNAr plot of dosis 0.1", las =1)
points(median.0.1$mRNA ~ median.0.1$time, col = "red", type = "l")
lines(out.0.1[,1], out.0.1[,2])
# Plot Free Receptor points for 0.1 dose
plot(dose.0.1$Free_receptor ~ dose.0.1$time,
xlab = "time", ylab = "Free Receptor concentration", main = "Free Receptor plot of dosis 0.1", las = 1)
points(median.0.1$Free_receptor ~ median.0.1$time, col = "red", type = "l")
lines(out.0.1[,1], out.0.1[,3])
# Plot mRNA plot for 0.3 dose
plot(dose.0.3$mRNA ~ dose.0.3$time,
xlab = "time", ylab = "mRNAr concentration", main = "mRNAr plot of dosis 0.3", las =1 )
points(median.0.3$mRNA ~ median.0.3$time, col = "red", type = "l")
lines(out.0.3[,1], out.0.3[,2])
# Plot Free Receptor points for 0.3 dose
plot(dose.0.3$Free_receptor ~ dose.0.3$time,
xlab = "time", ylab = "Free Receptor concentration", main = "Free Receptor plot of dosis 0.3", las = 1)
points(median.0.3$Free_receptor ~ median.0.3$time, col = "red", type = "l")
lines(out.0.3[,1], out.0.3[,3])
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N))- k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out <- ode(y = state, times = times, func = mRNA.dynamic, parms = parameters)
plot(out, las = 1)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = out.steady[1,-1], times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady.second, las = 1)
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
corticosteroid <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out.normal <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
parameters['D'] <- 80 * 1000 * 1/374.471
out.high <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
parameters['D'] <- 1 * 1000 * 1/374.471
out.low <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
plot(out.normal[,1], out.normal[,2], las = 1, main = "mRNAr", ylim = c(0, 5), type = "l",
xlab = "time (h)", ylab = "receptor mRNA")
lines(out.high[,2], col = "red")
lines(out.low[,2], col = "green")
legend(x = 35, y = 2, legend = c("low dosis", "normal dosis", "high dosis"), fill = c("green", "black", "red"))
plot(out.normal[,1], out.normal[,3], las = 1, main = "R", ylim = c(0, 275), type = "l",
xlab = "time (h)", ylab = "free receptor density ")
lines(out.high[,3], col = "red")
lines(out.low[,3], col = "green")
legend(x = 35, y = 200, legend = c("low dosis", "normal dosis", "high dosis"), fill = c("green", "black", "red"))
MPL <- read.csv("MPL.csv")
dose.0.1 <- MPL[MPL$dose == 0.1,]
dose.0.3 <- MPL[MPL$dose == 0.3,]
medians <- aggregate(MPL[,c("MPL_conc","mRNA","Free_receptor")],list(MPL$dose,MPL$time), median, na.rm=T)
names(medians)[1:2] <- c("dose","time")
median.0.1 <- medians[medians$dose == 0.1,]
median.0.3 <- medians[medians$dose == 0.3,]
# Changes states of model from medians on time = 0
state['mRNAr'] <- medians[medians$time == 0,]$mRNA
state['R'] <- medians[medians$time == 0,]$Free_receptor
# Change the duration of the model with time points from experimental data
times <- unique(MPL$time)
# Change dosis concentration parameter (D) for 0.1 dosis
median_MPL_01 <- median(MPL$MPL_conc[MPL$dose==0.1], na.rm=T)
parameters['D'] <- median_MPL_01 * 1000 * 1/374.471
# Simulate model for 0.1 dosis
out.0.1 <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
# Change dosis concentration parameter (D) for 0.3 dosis
median_MPL_03 <- median(MPL$MPL_conc[MPL$dose==0.3], na.rm=T)
parameters['D'] <- median_MPL_03 * 1000 * 1/374.471
# Simulate model for 0.3 dosis
out.0.3 <- ode(y = state, times = times, func = corticosteroid, parms = parameters)
par(mfrow = c(2,2), cex = 0.8)
# Plot mRNA plot for 0.1 dose
plot(dose.0.1$mRNA ~ dose.0.1$time,
xlab = "time", ylab = "mRNAr concentration", main = "mRNAr plot of dosis 0.1", las =1)
points(median.0.1$mRNA ~ median.0.1$time, col = "red", type = "l")
lines(out.0.1[,1], out.0.1[,2])
# Plot Free Receptor points for 0.1 dose
plot(dose.0.1$Free_receptor ~ dose.0.1$time,
xlab = "time", ylab = "Free Receptor concentration", main = "Free Receptor plot of dosis 0.1", las = 1)
points(median.0.1$Free_receptor ~ median.0.1$time, col = "red", type = "l")
lines(out.0.1[,1], out.0.1[,3])
# Plot mRNA plot for 0.3 dose
plot(dose.0.3$mRNA ~ dose.0.3$time,
xlab = "time", ylab = "mRNAr concentration", main = "mRNAr plot of dosis 0.3", las =1 )
points(median.0.3$mRNA ~ median.0.3$time, col = "red", type = "l")
lines(out.0.3[,1], out.0.3[,2])
# Plot Free Receptor points for 0.3 dose
plot(dose.0.3$Free_receptor ~ dose.0.3$time,
xlab = "time", ylab = "Free Receptor concentration", main = "Free Receptor plot of dosis 0.3", las = 1)
points(median.0.3$Free_receptor ~ median.0.3$time, col = "red", type = "l")
lines(out.0.3[,1], out.0.3[,3])
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) #- k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
times <- seq(0, 48)
out <- ode(y = state, times = times, func = mRNA.dynamic, parms = parameters)
plot(out, las = 1)
library(deSolve)
mRNA.dynamic <- function(t, state, paramters) {
with(as.list(c(state, paramters)),{
dmRNAr <- ks.Rm * (1 - DR.N / (IC50.Rm + DR.N)) - k.dRm * mRNAr
dR <- k.sR * mRNAr + Rf * k.re * DR.N - k.on * D * R - k.dR * R
dDR <- k.on * D * R - k.T * DR
dDR.N <- k.T * DR - k.re * DR.N
list(c(dmRNAr, dR, dDR, dDR.N))
})
}
parameters <- c(ks.Rm = 2.90,
IC50.Rm = 26.2,
k.on = 0.00329,
k.T = 0.63,
k.re = 0.57,
Rf = 0.49,
k.dR = 0.0572,
k.dRm = 0.612,
k.sR = 3.22,
D = 20 * 1000 * 1/374.471 )
state <- c(mRNAr = 4.74,
R = 267,
DR = 0,
DR.N = 0)
t.steady <- seq(0, 35)
t.steady.second <- seq(35, 100)
out.steady <- ode(y = state, times = t.steady, func = mRNA.dynamic, parms = parameters)
parameters['D'] <- 0
out.steady.second <- ode(y = tail(out.steady, 1)[,-1], times = t.steady.second, func = mRNA.dynamic, parms = parameters)
plot(out.steady[,2] ~ out.steady[,1], las = 1, xlim = c(0, 100), type = "l", ylab = "mRNAr concentration", xlab = "time", main = "mRNAr")
lines( out.steady.second[,2] ~ out.steady.second[,1])
plot(out.steady[,3] ~ out.steady[,1], las = 1, xlim = c(0, 100), type = "l", ylab = "R concentration", xlab = "time", main = "R")
lines( out.steady.second[,3] ~ out.steady.second[,1])
