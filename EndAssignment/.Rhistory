if (scenario == 2){
print(scenario)
plot(N_all[,scenario] ~ N_all$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(N_all) * 1.25))
}
else{
lines(N_all[,scenario] ~ N_all$f, col = cols[scenario], lwd = 2)
}
}
2:4
for (i in 2:4){}
for (i in 2:4){}
for (i in 2:4){print(i)}
cols = c('orange', 'blue', 'purple')
for (scenario in 2:4){
if (scenario == 2){
print(scenario)
plot(N_all[,scenario] ~ N_all$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(N_all) * 1.25))
}
else{
print(scenario)
lines(N_all[,scenario] ~ N_all$f, col = cols[scenario], lwd = 2)
}
}
N_all[,4]
cols = c('orange', 'blue', 'purple')
for (scenario in 1:3){
if (scenario == 1){
print(scenario)
plot(N_all[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(N_all) * 1.25))
}
else{
lines(N_all[,scenario] ~ df$f, col = cols[scenario], lwd = 2)
}
}
N_all[,1]
N_all
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
# plot(df$'p*' ~ df$f, type = 'l', col = 'orange', lwd = 2, ylim =c(1, 0.1))
# plot(df$rho ~ df$f, type = 'l', col = 'orange', lwd = 2)
}
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
# lines(df$'N*' ~ df$f, col = 'blue', lwd = 2)
# lines(df$'p*' ~ df$f, col = 'blue', lwd = 2)
# lines(df$rho ~ df$f, col = 'blue', lwd = 2)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
# lines(df$'N*' ~ df$f, col = 'purple', lwd = 2)
# lines(df$'p*' ~ df$f, col = 'purple', lwd = 2)
# plot(df$rho ~ df$f, col = 'purple', lwd = 2)
}
}
cols = c('orange', 'blue', 'purple')
for (scenario in 1:3){
if (scenario == 1){
plot(N_all[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(N_all) * 1.25))
}
else{
lines(N_all[,scenario] ~ df$f, col = cols[scenario], lwd = 2)
}
}
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
p_all <- data.frame('0.0015' = df$p)
p_all <- data.frame('0.0015' = df$rho)
}
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
p_all <- data.frame(p_all, '0.006' = df$p)
rho_all <- data.frame(rho_all, '0.006' = df$rho)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
p_all <- data.framep(p_all, '0.0105' = df$p)
rho_all <- data.framep(rho_all, '0.0105' = df$rho)
}
}
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
p_all <- data.frame('0.0015' = df$p)
rho_all <- data.frame('0.0015' = df$rho)
}
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
p_all <- data.frame(p_all, '0.006' = df$p)
rho_all <- data.frame(rho_all, '0.006' = df$rho)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
p_all <- data.framep(p_all, '0.0105' = df$p)
rho_all <- data.framep(rho_all, '0.0105' = df$rho)
}
}
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
p_all <- data.frame('0.0015' = df$p)
rho_all <- data.frame('0.0015' = df$rho)
}
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
p_all <- data.frame(p_all, '0.006' = df$p)
rho_all <- data.frame(rho_all, '0.006' = df$rho)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
p_all <- data.framep(p_all, '0.0105' = df$p)
rho_all <- data.frame(rho_all, '0.0105' = df$rho)
}
}
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
p_all <- data.frame('0.0015' = df$p)
rho_all <- data.frame('0.0015' = df$rho)
}
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
p_all <- data.frame(p_all, '0.006' = df$p)
rho_all <- data.frame(rho_all, '0.006' = df$rho)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
p_all <- data.frame(p_all, '0.0105' = df$p)
rho_all <- data.frame(rho_all, '0.0105' = df$rho)
}
}
cols = c('orange', 'blue', 'purple')
for (item in c(N_all, p_all, rho_all){
cols = c('orange', 'blue', 'purple')
for (item in c(N_all, p_all, rho_all)){
for (scenario in 1:3){
if (scenario == 1){
plot(item[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(item) * 1.25))
}
else{
lines(item[,scenario] ~ df$f, col = cols[scenario], lwd = 2)
}
}
}
cols = c('orange', 'blue', 'purple')
for (item in c(N_all, p_all, rho_all)){
print(item)
for (scenario in 1:3){
if (scenario == 1){
plot(item[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(item) * 1.25))
}
else{
lines(item[,scenario] ~ df$f, col = cols[scenario], lwd = 2)
}
}
}
'N_all'
N_all
c(N_all, p_all)
c('x' = N_all, 'p' = p_all)
data.frame('x' = N_all, 'p' = p_all)
data.frame(N_all, p_all)
cols = c('orange', 'blue', 'purple')
datasets =
for (item in (N_all, p_all, rho_all)){
list(N_all, p_all, rho_all)
cols = c('orange', 'blue', 'purple')
datasets =
for (item in list(N_all, p_all, rho_all)){
for (scenario in 1:3){
if (scenario == 1){
plot(item[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 2, ylim = c(0, max(item) * 1.25))
}
else{
lines(item[,scenario] ~ df$f, col = cols[scenario], lwd = 2)
}
}
}
cols = c('orange', 'blue', 'purple')
datasets =
for (item in list(N_all, p_all, rho_all)){
for (scenario in 1:3){
if (scenario == 1){
plot(item[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(item) * 1.25))
}
else{
lines(item[,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
for (item in list(N_all, p_all)){print(item)}
for (item in list(N_all, p_all)){print(name(item))}
for (item in list(N_all, p_all)){print(names(item))}
for (item in length(datasets)){print(item)}
for (item in 1:length(datasets)){print(item)}
datasets = list(N_all, p_all, rho_all)
for (item in length(datasets)){print(item)}
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
for (scenario in 1:3){
if (scenario == 1){
plot(datasets[item][,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(item) * 1.25), ylab = 'f', xlab = labels[item])
}
else{
lines(datasets[item][,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
datasets
datasets[1]
datasets[1][,2]
datasets[1][,1]
datasets[1][1]
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
for (scenario in 1:3){
if (scenario == 1){
plot(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(item) * 1.25), ylab = 'f', xlab = labels[item])
}
else{
lines(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
for (scenario in 1:3){
if (scenario == 1){
plot(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(datasets[[item]]) * 1.25), ylab = 'f', xlab = labels[item])
}
else{
lines(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
data = datasets[[item]]
for (scenario in 1:3){
if (scenario == 1){
plot(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(datasets[[item]]) * 1.25), ylab = 'f', xlab = labels[item])
}
else{
lines(datasets[[item]][,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
data = datasets[[item]]
for (scenario in 1:3){
if (scenario == 1){
plot(data[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(data) * 1.25), ylab = 'f', xlab = labels[item])
}
else{
lines(data[,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
data = datasets[[item]]
for (scenario in 1:3){
if (scenario == 1){
plot(data[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(data) * 1.25), xlab = 'f', ylab = labels[item])
}
else{
lines(data[,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
N_all
population <- 50000
infected <- 100
for (beta_t in c(0.0015, 0.006, 0.0105)){
df <- data.frame(matrix(nrow = 0, ncol = 8))
colnames(df) <- c('f', 'Sp', 'Ip', 'St', 'It', 'N', 'p', 'rho')
for (f in seq(0.01, 0.99, 0.01)){
# demography
m <- 0.1
b0 <- 0.4
b1 <- (b0 - m) / population
c_m <- 0.2
# infection
beta_p <- 0.006
beta_t <- beta_t
gamma <- 36.5
mu <- 0.25
alpha <- 2
# movement
sigma <- -log(0.1)
c_sigma <- 0.2
parameters <- c(m, b0, b1, c_m, beta_p, beta_t, gamma, mu, alpha, f, sigma, c_sigma)
# Initial values
state<- c(Sp = (population - infected) * (1 - f),
Ip = infected * (1 - f),
St = (population - infected) * f,
It=  infected * f)
# Time frame of 50 years
times <- seq(0, 50, 0.05)
out <- tail(ode(y = state, times = times, func = wildlife_urbanization_model, parms = parameters), 1)
df[nrow(df) + 1,] <- c(f, out[2:5], sum(out[2:5]), (out[3] + out[5])/sum(out[2:5]), out[5]/f)
}
if (beta_t == 0.0015){
N_all <- data.frame('0.0015' = df$N)
p_all <- data.frame('0.0015' = df$p)
rho_all <- data.frame('0.0015' = df$rho)
}
results = list
if (beta_t == 0.006){
N_all <- data.frame(N_all, '0.006' = df$N)
p_all <- data.frame(p_all, '0.006' = df$p)
rho_all <- data.frame(rho_all, '0.006' = df$rho)
}
if (beta_t == 0.0105){
N_all <- data.frame(N_all, '0.0105' = df$N)
p_all <- data.frame(p_all, '0.0105' = df$p)
rho_all <- data.frame(rho_all, '0.0105' = df$rho)
}
}
results
results <- list()
results
results[1] <- 1
results
results[N_all] <- 1
results['N_all'] <- 1
results
results['N_all'] <- data.frame(1, 2)
results['N_all'] <- data.frame(1)
results
results['N_all'] <- N_all
results['test'] <- N_all
results
N_all
datasets = list(N_all, p_all, rho_all)
labels = c('population size', 'infection prevealance', 'spillover risk')
cols = c('orange', 'blue', 'purple')
for (item in 1:length(datasets)){
data = datasets[[item]]
for (scenario in 1:3){
if (scenario == 1){
plot(data[,scenario] ~ df$f, col = cols[scenario], type = 'l', lwd = 3, ylim = c(0, max(data) * 1.25), xlab = 'f', ylab = labels[item])
}
else{
lines(data[,scenario] ~ df$f, col = cols[scenario], lwd = 3)
}
}
}
